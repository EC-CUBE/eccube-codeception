#!/usr/bin/env php

<?php

/*
 * Original https://github.com/Codeception/Codeception/blob/2.3/codecept
 *
 * Docker を使用して codecept run を実行した場合, テスト対象の EC-CUBE が
 * 起動していないとエラーとなってしまう.
 * このため, 本スクリプトと置き換えて, テスト対象の EC-CUBE の起動をチェック
 * する必要がある.
 */

$base_url = getenv('BASE_URL') ? getenv('BASE_URL') : 'http://eccube4/';
$i = 0;

echo 'health check to '.$base_url.', please wait.';
while (healthCheck($base_url) === false) {
    if ($i >= 6) break;
    echo '.';
    sleep(10);
    $i++;
}
echo PHP_EOL;

/**
 * Codeception CLI
 */
require_once __DIR__.'/autoload.php';

use Codeception\Application;

$app = new Application('Codeception', Codeception\Codecept::VERSION);
$app->add(new Codeception\Command\Build('build'));
$app->add(new Codeception\Command\Run('run'));
$app->add(new Codeception\Command\Init('init'));
$app->add(new Codeception\Command\Console('console'));
$app->add(new Codeception\Command\Bootstrap('bootstrap'));
$app->add(new Codeception\Command\GenerateCept('generate:cept'));
$app->add(new Codeception\Command\GenerateCest('generate:cest'));
$app->add(new Codeception\Command\GenerateTest('generate:test'));
$app->add(new Codeception\Command\GenerateSuite('generate:suite'));
$app->add(new Codeception\Command\GenerateHelper('generate:helper'));
$app->add(new Codeception\Command\GenerateScenarios('generate:scenarios'));
$app->add(new Codeception\Command\Clean('clean'));
$app->add(new Codeception\Command\GenerateGroup('generate:groupobject'));
$app->add(new Codeception\Command\GeneratePageObject('generate:pageobject'));
$app->add(new Codeception\Command\GenerateStepObject('generate:stepobject'));
$app->add(new Codeception\Command\GenerateEnvironment('generate:environment'));
$app->add(new Codeception\Command\GenerateFeature('generate:feature'));
$app->add(new Codeception\Command\GherkinSnippets('gherkin:snippets'));
$app->add(new Codeception\Command\GherkinSteps('gherkin:steps'));
$app->add(new Codeception\Command\DryRun('dry-run'));
$app->add(new Codeception\Command\ConfigValidate('config:validate'));

// Suggests package
if (class_exists('Stecman\Component\Symfony\Console\BashCompletion\CompletionCommand')) {
    $app->add(new Codeception\Command\Completion());
} else {
    $app->add(new Codeception\Command\CompletionFallback());
}

$app->registerCustomCommands();
$app->run();

function healthCheck($base_url)
{
    $curl = curl_init();
    curl_setopt($curl, CURLOPT_URL, $base_url);
    curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'GET');
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_HEADER, true);
    $response = curl_exec($curl);
    $code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
    return $code == 200;
}
